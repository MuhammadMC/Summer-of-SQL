--We want to stack the tables on top of one another, since they have the same fields in each sheet. We can do this one of 2 ways (help):
--Drag each table into the canvas and use a union step to stack them on top of one another
--    Use a wildcard union in the input step of one of the tables
--    Some of the fields aren't matching up as we'd expect, due to differences in spelling. Merge these fields together
--    Make a Joining Date field based on the Joining Day, Table Names and the year 2023
--    Now we want to reshape our data so we have a field for each demographic, for each new customer (help)
--    Make sure all the data types are correct for each field
--    Remove duplicates (help)
--    If a customer appears multiple times take their earliest joining date
--    Output the data


WITH CTE as 
(
SELECT *, 'April' AS Tablename
FROM pd2023_wk04_april

Union All
SELECT * , 'August' AS Tablename
FROM pd2023_wk04_august

Union All
SELECT *, 'December' AS Tablename
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_DECEMBER

Union All
SELECT *, 'February' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_FEBRUARY

Union All
SELECT *, 'January' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_JANUARY

Union All
SELECT *, 'July' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_JULY

Union All
SELECT *, 'June' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_JUNE

Union All
SELECT *, 'March' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_MARCH

Union All
SELECT *, 'May' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_MAY

Union All
SELECT *, 'November' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_NOVEMBER

Union All
SELECT *, 'October' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_OCTOBER

Union All
SELECT *, 'September' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_SEPTEMBER
)
SELECT
ID,
date_from_parts(2023,DATE_PART('month',DATE(Tablename,'MMMM')) ,joining_day) AS JoiningDate,
Demographic,
Value
FROM CTE;

-- Union causes an aggregate step in the snowflake workflow. Use Union All
-- all columns have to be consistent in all the tables 



--    Now we want to reshape our data so we have a field for each demographic, for each new customer (help)
--    Make sure all the data types are correct for each field


WITH CTE as 
(
SELECT *, 'April' AS Tablename
FROM pd2023_wk04_april

Union All
SELECT * , 'August' AS Tablename
FROM pd2023_wk04_august

Union All
SELECT *, 'December' AS Tablename
FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_DECEMBER

Union All
SELECT *, 'February' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_FEBRUARY

Union All
SELECT *, 'January' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_JANUARY

Union All
SELECT *, 'July' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_JULY

Union All
SELECT *, 'June' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_JUNE

Union All
SELECT *, 'March' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_MARCH

Union All
SELECT *, 'May' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_MAY

Union All
SELECT *, 'November' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_NOVEMBER

Union All
SELECT *, 'October' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_OCTOBER

Union All
SELECT *, 'September' AS Tablename
FROM 
TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK04_SEPTEMBER
)

-- ALL tables have been unioned together and have added the month name as the table name to indicate the table and month its from
, 

Pre_pivot as (
--Common table expression
SELECT
ID,
date_from_parts(2023,DATE_PART('month',DATE(Tablename,'MMMM')) ,joining_day) AS JoiningDate,
Demographic,
Value
FROM CTE
)
-- THIS common table expression is drawing the above fields from the CTE union table made
-- THIS expression is before pivoting the demographic field


, POST_PIVOT AS (
SELECT
ID,
joining_date,
Ethnicity,
Account_Type,
Date_of_Birth,
--    Remove duplicates (help)
ROW_NUMBER () OVER (Partition by ID ORDER by joining_date ASC) as RN
FROM PRE_PIVOT

Pivot(MAX(value) FOR Demographic IN ('Ethnicity', 'Account Type', 'Date of Birth')) AS P
(ID,
joining_date,
Ethnicity,
Account_Type,
Date_of_Birth)
)

-- the post pivot table is only to form a field for each of the pivoted demographics from the pre-pivot table

SELECT 
ID,
joining_date,
Ethnicity,
Account_Type,
Date_of_Birth
FROM POST_PIVOT
WHERE RN=1
-- RN=1 assigns 1 to each new ID by the joining_date
;
